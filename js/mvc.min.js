var MVC=(function(){var a={Model:{},View:{},Controller:{},Helper:{}};return a}());MVC.Helper.ServerAPI=(function(){var b={getBase64EncodedImage:function(f,d){debug("Helper.ServerAPI getBase64EncodedImage: send a xhr request to get a base 64 encoded image of the google map image");debug(escape(d));var e={url:escape(d)};_getRequest(e,f)},getGasstationList:function(l,k,g,j,e,d,f){debug("Helper.ServerAPI getGasstationList: send a xhr request to fetch the list of gasstations from the proxy");var h={showClosedGasstations:k,gasType:g,startLatitude:e,startLongitude:j,endLatitude:f,endLongitude:d};a(h,l)},getTranslations:function(d,e){debug("Helper.ServerAPI getTranslations: send a xhr request to fetch the translated strings for "+d);a({},e,"./locale/lang."+d)},getUserProfileData:function(d,f){debug("Helper.ServerAPI getUserProfileData: send a xhr request to fetch profile data from web service");var e={user_id:d,action:"getUserProfileData"};a(e,f)},getUserInterests:function(d,f){debug("Helper.ServerAPI getUserInterests: send a xhr request to fetch user interests from web service");var e={user_id:d,action:"getUserInterests"};a(e,f)}},c="./server/proxy.php",a=function(f,e,d){if(typeof d=="undefined"){d=c}debug(f);debug(d);widget.httpGetJSON(d,f,function(g){debug("Helper.ServerAPI _getJSONRequest: the response has just arrived!");debug(g);if(typeof g.error!="undefined"){debug("Server reported the following error while processing the request: "+g.error);MVC.View.notify("An error occurred: "+g.error+" <br />Please try again!");return}e(g)},function(h,j,g){debug("Request failed: "+g);MVC.View.notify("An unexpected error occurred: "+g)})};_getRequest=function(f,e,d){if(typeof d=="undefined"){d=c}debug(f);debug(d);widget.httpGet(d,f,function(g){debug("Helper.ServerAPI _getRequest: the response has just arrived!");e(g)},function(h,j,g){debug("Request failed: "+g);MVC.View.notify("An unexpected error occurred: "+g)})};debug("MVC loaded");return b}());MVC.Model=(function(b){b.setCurrentLongitude=function(d){debug("Model setCurrentLongitude: set the current longitude");debug(d);a=d};b.setCurrentLatitude=function(d){debug("Model setCurrentLatitude: set the current latitude");debug(d);c=d};b.getCurrentLongitude=function(){debug("Model getCurrentLongitude: return the current longitude");return a};b.getCurrentLatitude=function(){debug("Model getCurrentLongitude: return the current latitude");return c};b.getStoredAddresses=function(){debug("Model getStoredAddresses: getting offline stored addresses");var f=new Array();var e=0;for(e=0;e<localStorage.length;e++){var d=localStorage.key(e);if(d.indexOf("image")==-1){f.push(d)}}return f};b.getGasstationListOffline=function(d){debug("Model getGasstationListOffline: getting offline information for address"+d);if(d!=null){return localStorage.getItem(d)}};b.cacheRequest=function(e,d){debug("Model cacheRequest: caching current request key:"+e);if(localStorage){localStorage.removeItem(e,d);localStorage.setItem(e,d);return true}else{return false}};var a=null;var c=null;debug("Model loaded");return b}(MVC.Model||{}));MVC.View=(function(a,f,e){a.notify=function(h){debug("View notify(): writing notification message for the user: "+h);e("div#notification").html(h).slideDown(500,function(){var j=e(this);setTimeout(function(){j.slideUp(500)},2000)});g(d)};a.init=function(h){e(document).ready(function(){if(h){debug("View init(): set the language data");d=h;g(h.id)}debug("View init(): set the click events");b();e("div#accordion").accordion();e("div#tabs").tabs()})};a.updateCurrentAddress=function(h){debug("View updateCurrentAddress(): updates the current address with the geolocated one: "+h);e("input#address").val(h)};a.getCurrentAddress=function(){debug("View getCurrentAddress(): reads the current address");return e("input#address").val()};a.updateGasstationList=function(h){debug("View updateGasstationList(): updating list of gas stations");var l='<tr><th><span lang="en">Gasstation</span></th><th><span lang="en">Distance</span></th><th><span lang="en">Price</span></th></tr>';for(var k=0;k<h.length;k++){var j=h[k].spritPrice[0].amount;l+='<tr class="ui-widget-content"><td> '+c(h[k].address)+"</td><td>"+c(h[k].distance)+" [km] </td><td>"+c(j==""?"<span lang='en'>not unter the 5 cheapest</span>":j+" [&euro;]")+"</td></tr>"}e("#gasstation_list").html(l);g(d)};a.getShowOnlyOpenGasstations=function(){debug("View getShowOnlyOpenGasstations(): "+e("#show_closed").is(":checked"));return e("#show_closed").is(":checked")};a.showOfflineMap=function(h){debug("View showOfflineMap(): writing base64 encoded image to tag");e("#offline_image").html("<img src='data:image/png;base64,"+h+"'/>");e("#offline_image").show();e("#map_canvas").hide()};a.getMapCanvas=function(){debug("View showOfflineMap(): "+e("#map_canvas")[0]);return e("#map_canvas")[0]};a.showOnlineMap=function(){debug("View showOfflineMap(): ");e("#map_canvas").width(425);e("#map_canvas").height(250);e("#offline_image").hide();e("#map_canvas").show()};a.isCacheRequest=function(){debug("View isCacheRequest(): "+e("#cache_request").is(":checked"));return e("#cache_request").is(":checked")};a.toogleOnlineMode=function(){debug("View toogleOnlineMode(): ");return e("div#input_area").toggle(100)};a.toogleOfflineMode=function(){debug("View toogleOfflineMode(): ");return e("div#offline_area").toggle(100)};a.getGasType=function(){debug("View getGasType(): "+e("#gas_type")[0].value);return e("#gas_type")[0].value};a.getSelectedAddress=function(){debug("View getSelectedAddress(): "+e("#offline_addresses")[0].value);return e("#offline_addresses")[0].value};a.populateOfflineAddresses=function(k){debug("View populateOfflineAddresses(): fro addresses"+k);var j='<option value="-1">-----------------------------</option>';for(var h=0;h<k.length;h++){j+='<option value="'+h+'"> '+c(k[h])+"</option>"}e("select#offline_addresses").html(j)};a.getAutoCompleteElement=function(){return e("input#address")[0]};var d=null,g=function(h){debug("View _translateExistingStringsInDOM(): substituting the strings in DOM with the translated ones");e("* [lang='en']").each(function(){e(this).html(c(e(this).html())).attr("lang",h)})},c=function(h){return(d!=null&&typeof d[h]!="undefined")?d[h]:h},b=function(){debug("View _setClickEvents(): set click event for button#button_locate_user");e("button#button_locate_user").click(function(){debug("View Click Event triggered: notice the Controller that the user wants to locate himself");f.updatePositionGeolocation()});debug("View _setClickEvents(): set click event for button#button_find_gasstations");e("button#button_find_gasstations").click(function(){debug("View Click Event triggered: notice the Controller the gasstation list is requested");f.gasstationListAsked()});debug("View _setClickEvents(): set click event for button#online_mode");e("button#online_mode").click(function(){debug("View Click Event triggered: notice the Controller the input area has to toggle");f.toogleOnlineMode()});debug("View _setClickEvents(): set change event for according when clicked on offline mode");e("div#accordion").accordion({change:function(h,j){if(j.newHeader.text().indexOf("Offline")!=null){f.fillAddressesFromCache()}}});debug("View _setClickEvents(): set click event for select#offline_addresses");e("select#offline_addresses").change(function(){debug("View Click Event triggered: notice the Controller the offline_addresses is changed");f.updateGasstationOffline()})};debug("View loaded");return a}(MVC.View||{},MVC.Controller,jQuery));MVC.Controller=(function(k,e,b,c){k.init=function(p){debug("Controller init: initialize whole the system where some preprocessing is needed. In this example command View to intialize itself and get the translation string from server if needed!");var n=new google.maps.LatLngBounds(new google.maps.LatLng(50,17),new google.maps.LatLng(46,9));var m={bounds:n,types:["geocode"]};var o=new google.maps.places.Autocomplete(b.getAutoCompleteElement(),m);j(p);f=p;debug("Controller init(): setup address autocomplete functionality");google.maps.event.addListener(o,"place_changed",function(){g(o.getPlace().geometry.location.Ra);l(o.getPlace().geometry.location.Qa)})};k.updatePositionGeolocation=function(){debug("Controller updatePositionGeolocation(): update position using html5 geolocation api");if(navigator.geolocation){navigator.geolocation.getCurrentPosition(function(m){h(m)},function(m){debug("Controller updatePositionGeolocation: ERROR "+m);b.notify("navigator.geolocation "+m)})}else{debug("Controller updatePositionGeolocation: ERROR navigator.geolocation not supported");b.notify("navigator.geolocation not supported")}};k.updateLongitude=function(m){debug("Controller updateLongitude: updates the longitude on location request");g(m)};k.updateLatitude=function(m){debug("Controller updateLatitude: updates the latitude on location request");l(m)};k.updateGasstationOffline=function(){debug("Controller updateGasstationOffline(): reading cached data from localStorage");var m=e.getStoredAddresses();var n=b.getSelectedAddress();var o=e.getGasstationListOffline(m[n]);var p=e.getGasstationListOffline(m[n]+"_image");debug(o);b.showOfflineMap(p);b.updateGasstationList(JSON.parse(o))};k.gasstationListAsked=function(){debug("Controller gasstationListAsked: get gasstation list from Request, storeit in the Model and let View append it to the DOM");if(e.getCurrentLongitude==null||e.getCurrentLatitude()==null){b.notify("<span lang='en'>Type in an address, or located yoursef first!</span>");return}c.getGasstationList(function(m){b.updateGasstationList(m);debug("cache enabled: "+b.isCacheRequest());if(b.isCacheRequest()){e.cacheRequest(b.getCurrentAddress(),JSON.stringify(m));var n=d(m);c.getBase64EncodedImage(function(o){if(!e.cacheRequest(b.getCurrentAddress()+"_image",o)){b.notify("Your browser does not support webstorage")}},n)}a(m)},b.getShowOnlyOpenGasstations()?"checked":"",b.getGasType(),e.getCurrentLongitude()-0.1,e.getCurrentLatitude()-0.1,e.getCurrentLongitude()+0.1,e.getCurrentLatitude()+0.1)};k.fillAddressesFromCache=function(){debug("Controller fillAddressesFromCache(): populating stored addresses");var m=e.getStoredAddresses();b.populateOfflineAddresses(m)};var j=function(m){if(m!="en"){debug("Controller _init(): get the translation data from language file");c.getTranslations(m,function(n){b.init(n)})}else{b.init(null)}};var h=function(m){debug("Controller _updatePosition(): updates the geolocated position");debug(m);e.setCurrentLatitude(m.coords.latitude);e.setCurrentLongitude(m.coords.longitude);var o=new google.maps.Geocoder();var n=new google.maps.LatLng(m.coords.latitude,m.coords.longitude);if(o){o.geocode({latLng:n},function(q,p){if(p==google.maps.GeocoderStatus.OK){b.updateCurrentAddress(q[0].formatted_address)}else{b.notify("Geocoding failed: "+p)}})}else{b.notify("Your browser does not support geocoder")}};var g=function(m){debug("Controller _updateLongitude(): updates the current longitude");e.setCurrentLongitude(m)};var l=function(m){debug("Controller _updateLatitude(): updates the current latitude");e.setCurrentLatitude(m)};var d=function(n){debug("Controller _createOfflineMapUrl(): create google static url from gasstation list");var p="http://maps.google.com/maps/api/staticmap?";var m="center="+e.getCurrentLatitude()+","+e.getCurrentLongitude();var o="&zoom=12&size=400x250&maptype=roadmap&sensor=false";var s="";var r="http://www.caffeinated.at/MMIS/fillingstation_";var q={0:r+"green.png",1:r+"light_green.png",2:r+"yellow.png",3:r+"orange.png",4:r+"red.png",};for(i=0;i<n.length;i++){s=s+"&markers=icon:"+(i>4?q[4]:q[i])+"|"+n[i].latitude+","+n[i].longitude}var t=p+m+s+o;return t};var a=function(p){debug("Controller _createOfflineMapUrl(): create google map url from gasstation list");var o=new google.maps.LatLng(e.getCurrentLatitude(),e.getCurrentLongitude());var q={zoom:14,center:o,mapTypeId:google.maps.MapTypeId.ROADMAP};var r=new google.maps.Map(b.getMapCanvas(),q);var n=new google.maps.LatLngBounds();var s={0:"images/fillingstation_green.png",1:"images/fillingstation_light_green.png",2:"images/fillingstation_yellow.png",3:"images/fillingstation_orange.png",4:"images/fillingstation_dark_orange.png",5:"images/fillingstation_red.png"};for(i=0;i<p.length;i++){var t=new google.maps.LatLng(p[i].latitude,p[i].longitude);n.extend(t);var m=new google.maps.Marker({position:t,map:r,title:p[i].gasStationName,icon:i>5?s[5]:s[i]})}b.showOnlineMap();r.fitBounds(n)};var f=null;debug("Controller loaded");return k}(MVC.Controller||{},MVC.Model,MVC.View,MVC.Helper.ServerAPI));